#!/usr/bin/env python

import psycopg2
import os

def create_postgres_credentials(login_user, login_password, db_name, db_user, db_password, host="localhost", port="5432"):
    """
    Creates a PostgreSQL database, user, and grants privileges.

    Args:
        db_name (str): The name of the database to create.
        db_user (str): The username for the new user.
        db_password (str): The password for the new user.
        host (str, optional): The PostgreSQL host. Defaults to "localhost".
        port (str, optional): The PostgreSQL port. Defaults to "5432".
    """
    try:
        # Connect to the 'postgres' database to create the new database and user.
        conn = psycopg2.connect(
            host=host,
            port=port,
            user=login_user,  # Default admin user. Change if needed.
            password=login_password #Get admin password from env, default to postgres.
            ,database="postgres"
        )
        conn.autocommit = True  # Important for creating databases and users

        cursor = conn.cursor()

        # Create the database.
        cursor.execute(f"CREATE DATABASE {db_name};")
        print(f"Database '{db_name}' created.")

        # Create the user.
        cursor.execute(f"CREATE USER {db_user} WITH PASSWORD '{db_password}';")
        print(f"User '{db_user}' created.")

        # Grant privileges to the user on the new database.
        cursor.execute(f"GRANT ALL PRIVILEGES ON DATABASE {db_name} TO {db_user};")
        print(f"Granted privileges to '{db_user}' on database '{db_name}'.")

        cursor.close()
        conn.close()

    except psycopg2.Error as e:
        print(f"Error creating database and user: {e}")

if __name__ == "__main__":
    # Example usage with environment variables or hardcoded values.
    db_name = os.environ.get("POSTGRES_DB", "mc-bench")
    db_user = os.environ.get("POSTGRES_USER", "mc-bench-admin")
    db_password = os.environ.get("POSTGRES_PASSWORD", "mc-bench")
    host = os.environ.get("POSTGRES_HOST", "localhost")
    port = os.environ.get("POSTGRES_PORT", "5432")

    login_user = os.environ.get("POSTGRES_ADMIN_USER")
    if not login_user:
        print("Please set the POSTGRES_ADMIN_USER environment variable, not set. Using default 'postgres',this may not be correct, please update.")
        login_user = "postgres"

    login_password = os.environ.get("POSTGRES_ADMIN_PASSWORD")
    if not login_password:
        print("Please set the POSTGRES_ADMIN_PASSWORD environment variable, not set. Using default 'postgres',this may not be correct, please update.")
        login_password = "postgres"

    create_postgres_credentials(login_user, login_password, db_name, db_user, db_password, host, port)
