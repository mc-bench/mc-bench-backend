"""make_sample_ids_nullable_in_comparison

Revision ID: c7757bc234ac
Revises: 213494c85c66
Create Date: 2025-03-05 22:08:25.225603

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "c7757bc234ac"
down_revision: Union[str, None] = "213494c85c66"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "comparison",
        "sample_1_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        schema="scoring",
    )
    op.alter_column(
        "comparison",
        "sample_2_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        schema="scoring",
    )
    # ### end Alembic commands ###

    # Data migration: Create comparison_rank entries from existing comparisons
    # Find all existing comparison records
    op.execute("""
    INSERT INTO scoring.comparison_rank (comparison_id, sample_id, rank, created)
    SELECT 
        c.id,
        c.winning_sample_id,
        1,  -- Rank 1 for the winning sample
        c.created
    FROM 
        scoring.comparison c
    WHERE 
        c.winning_sample_id IS NOT NULL
    """)

    # Insert second place records (the non-winning sample)
    op.execute("""
    INSERT INTO scoring.comparison_rank (comparison_id, sample_id, rank, created)
    SELECT 
        c.id,
        CASE 
            WHEN c.winning_sample_id = c.sample_1_id THEN c.sample_2_id
            ELSE c.sample_1_id
        END,
        2,  -- Rank 2 for the losing sample
        c.created
    FROM 
        scoring.comparison c
    WHERE 
        c.winning_sample_id IS NOT NULL
        AND c.sample_1_id IS NOT NULL
        AND c.sample_2_id IS NOT NULL
    """)

    # Handle any comparisons without a winning_sample_id (ties)
    # Both samples get rank 1 in a tie
    op.execute("""
    INSERT INTO scoring.comparison_rank (comparison_id, sample_id, rank, created)
    SELECT 
        c.id,
        c.sample_1_id,
        1,  -- Rank 1 for tied samples
        c.created
    FROM 
        scoring.comparison c
    WHERE 
        c.winning_sample_id IS NULL
        AND c.sample_1_id IS NOT NULL
    """)

    op.execute("""
    INSERT INTO scoring.comparison_rank (comparison_id, sample_id, rank, created)
    SELECT 
        c.id,
        c.sample_2_id,
        1,  -- Rank 1 for tied samples
        c.created
    FROM 
        scoring.comparison c
    WHERE 
        c.winning_sample_id IS NULL
        AND c.sample_2_id IS NOT NULL
    """)


def downgrade() -> None:
    raise RuntimeError("Upgrades only")
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "comparison",
        "sample_2_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        schema="scoring",
    )
    op.alter_column(
        "comparison",
        "sample_1_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        schema="scoring",
    )
    # ### end Alembic commands ###
