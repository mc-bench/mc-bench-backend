"""add_user_identification_token_table

Revision ID: 34cd8ee7f32c
Revises: 7a050a3306c3
Create Date: 2025-03-05 18:40:31.826934

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "34cd8ee7f32c"
down_revision: Union[str, None] = "7a050a3306c3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_identification_token",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "token",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_used_at",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["auth.user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("token", "user_id", name="uq_token_user_id"),
        schema="auth",
    )
    op.add_column(
        "user",
        sa.Column("canonical_identification_token_id", sa.Integer(), nullable=True),
        schema="auth",
    )
    op.create_foreign_key(
        None,
        "user",
        "user_identification_token",
        ["canonical_identification_token_id"],
        ["id"],
        source_schema="auth",
        referent_schema="auth",
    )
    op.add_column(
        "comparison",
        sa.Column("identification_token_id", sa.Integer(), nullable=True),
        schema="scoring",
    )

    # Drop the old session_id column and create a new one with UUID type
    # We can't directly cast VARCHAR to UUID in Postgres
    op.drop_column("comparison", "session_id", schema="scoring")
    op.add_column(
        "comparison",
        sa.Column("session_id", sa.UUID(), nullable=True),
        schema="scoring",
    )

    op.create_foreign_key(
        None,
        "comparison",
        "user_identification_token",
        ["identification_token_id"],
        ["id"],
        source_schema="scoring",
        referent_schema="auth",
    )
    op.drop_column("comparison", "identification_id", schema="scoring")
    # ### end Alembic commands ###


def downgrade() -> None:
    raise RuntimeError("Upgrades only")
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "comparison",
        sa.Column(
            "identification_id",
            sa.VARCHAR(length=36),
            autoincrement=False,
            nullable=True,
        ),
        schema="scoring",
    )
    op.drop_constraint(None, "comparison", schema="scoring", type_="foreignkey")
    op.alter_column(
        "comparison",
        "session_id",
        existing_type=sa.UUID(),
        type_=sa.VARCHAR(length=36),
        existing_nullable=True,
        schema="scoring",
    )
    op.drop_column("comparison", "identification_token_id", schema="scoring")
    op.drop_constraint(None, "user", schema="auth", type_="foreignkey")
    op.drop_column("user", "canonical_identification_token_id", schema="auth")
    op.drop_table("user_identification_token", schema="auth")
    # ### end Alembic commands ###
