"""Fix user table

Revision ID: 7d62170745c6
Revises: 95ab1bc41af5
Create Date: 2024-11-15 20:43:35.136687

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "7d62170745c6"
down_revision: Union[str, None] = "95ab1bc41af5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "auth_provider_email_hash_created_by_fkey",
        "auth_provider_email_hash",
        schema="auth",
        type_="foreignkey",
    )
    op.drop_column("auth_provider_email_hash", "created_by", schema="auth")
    op.create_table_comment("artifact", "", existing_comment=None, schema="sample")
    op.create_table_comment("artifact_kind", "", existing_comment=None, schema="sample")
    op.create_table_comment("sample", "", existing_comment=None, schema="sample")
    op.create_table_comment("run", "", existing_comment=None, schema="specification")
    op.create_table_comment(
        "run_state", "", existing_comment=None, schema="specification"
    )
    op.create_table_comment(
        "template", "", existing_comment=None, schema="specification"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    raise RuntimeError("Upgrades only")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment("template", existing_comment="", schema="specification")
    op.drop_table_comment("run_state", existing_comment="", schema="specification")
    op.drop_table_comment("run", existing_comment="", schema="specification")
    op.drop_table_comment("sample", existing_comment="", schema="sample")
    op.drop_table_comment("artifact_kind", existing_comment="", schema="sample")
    op.drop_table_comment("artifact", existing_comment="", schema="sample")
    op.add_column(
        "auth_provider_email_hash",
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=False),
        schema="auth",
    )
    op.create_foreign_key(
        "auth_provider_email_hash_created_by_fkey",
        "auth_provider_email_hash",
        "user",
        ["created_by"],
        ["id"],
        source_schema="auth",
        referent_schema="auth",
    )
    # ### end Alembic commands ###
