"""Add test_set and update sample with test_set_id

Revision ID: 8f1d29465102
Revises: ac88d1e18c73
Create Date: 2025-03-04 12:15:01.547438

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8f1d29465102"
down_revision: Union[str, None] = "ac88d1e18c73"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "test_set",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created", sa.TIMESTAMP(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column(
            "external_id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["auth.user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="sample",
        comment="A test set is a collection of samples that can be voted on.",
    )
    op.add_column(
        "sample", sa.Column("test_set_id", sa.Integer(), nullable=True), schema="sample"
    )
    op.create_foreign_key(
        None,
        "sample",
        "test_set",
        ["test_set_id"],
        ["id"],
        source_schema="sample",
        referent_schema="sample",
    )

    op.execute("""\
        INSERT INTO sample.test_set (created_by, name, description)
        VALUES 
            ((select id from auth.user where username = 'SYSTEM'), 'Unauthenticated Test Set', 'A fully public test set that requires no authentication to vote on.'),
            ((select id from auth.user where username = 'SYSTEM'), 'Authenticated Test Set', 'A test set that requires authentication to vote on.')
    """)

    # ### end Alembic commands ###


def downgrade() -> None:
    raise RuntimeError("Upgrades only")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "sample", schema="sample", type_="foreignkey")
    op.drop_column("sample", "test_set_id", schema="sample")
    op.drop_table("test_set", schema="sample")
    # ### end Alembic commands ###
