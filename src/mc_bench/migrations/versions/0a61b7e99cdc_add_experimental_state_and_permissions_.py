"""Add experimental state and permissions and other misc.

Revision ID: 0a61b7e99cdc
Revises: db79a9c13551
Create Date: 2025-02-25 00:23:20.622259

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0a61b7e99cdc"
down_revision: Union[str, None] = "db79a9c13551"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


EXPERIMENTAL_STATES = [
    "DRAFT",  # Initial state
    "IN_REVIEW",  # proposer can put into review
    "RELEASED",  # approver/admin can release
    "DEPRECATED",  # admin can deprecate
    "EXPERIMENTAL",  # admin can make experimental
    "REJECTED",  # approver/admin can reject
]

roles_to_permissions = {
    "researcher": [
        "sample:experiment:propose",
        "template:experiment:propose",
        "prompt:experiment:propose",
        "model:experiment:propose",
    ],
    "admin": [
        "sample:experiment:approve",
        "template:experiment:approve",
        "prompt:experiment:approve",
        "model:experiment:approve",
    ],
    "template-reviewer": [
        "template:read",
        "template:review",
        "template:experiment:approve",
    ],
    "prompt-reviewer": [
        "prompt:read",
        "prompt:review",
        "prompt:experiment:approve",
    ],
    "model-reviewer": [
        "model:read",
        "model:review",
        "model:experiment:approve",
    ],
}


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "experimental_state",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created", sa.TIMESTAMP(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="research",
    )
    op.add_column(
        "sample",
        sa.Column("experimental_state_id", sa.Integer(), nullable=True),
        schema="sample",
    )
    op.create_foreign_key(
        None,
        "sample",
        "experimental_state",
        ["experimental_state_id"],
        ["id"],
        source_schema="sample",
        referent_schema="research",
    )
    op.add_column(
        "model", sa.Column("name", sa.String(), nullable=True), schema="specification"
    )
    op.add_column(
        "model",
        sa.Column("experimental_state_id", sa.Integer(), nullable=True),
        schema="specification",
    )
    op.create_unique_constraint(None, "model", ["name"], schema="specification")
    op.create_foreign_key(
        None,
        "model",
        "experimental_state",
        ["experimental_state_id"],
        ["id"],
        source_schema="specification",
        referent_schema="research",
    )
    op.add_column(
        "prompt",
        sa.Column("experimental_state_id", sa.Integer(), nullable=True),
        schema="specification",
    )
    op.create_foreign_key(
        None,
        "prompt",
        "experimental_state",
        ["experimental_state_id"],
        ["id"],
        source_schema="specification",
        referent_schema="research",
    )
    op.add_column(
        "template",
        sa.Column("experimental_state_id", sa.Integer(), nullable=True),
        schema="specification",
    )
    op.create_foreign_key(
        None,
        "template",
        "experimental_state",
        ["experimental_state_id"],
        ["id"],
        source_schema="specification",
        referent_schema="research",
    )
    # ### end Alembic commands ###

    op.execute(sa.text("UPDATE specification.model SET name = slug;"))

    for state in EXPERIMENTAL_STATES:
        op.execute(
            f"INSERT INTO research.experimental_state (name) VALUES ('{state}') ON CONFLICT DO NOTHING"
        )

    for role in roles_to_permissions:
        op.execute(
            sa.text("""\
            INSERT INTO auth."role" (
                created_by,
                name
            ) VALUES (
                (SELECT ID FROM auth."user" where username = 'SYSTEM'),
                :role
            )
            ON CONFLICT (name) DO NOTHING;
        """).bindparams(
                role=role,
            )
        )

    for role, permissions in roles_to_permissions.items():
        for permission in permissions:
            op.execute(
                sa.text("""\
                INSERT INTO auth.permission (created_by, name) 
                VALUES (
                    (SELECT ID FROM auth."user" where username = 'SYSTEM'),
                    :permission
                )
                ON CONFLICT (name) DO NOTHING;
            """).bindparams(
                    permission=permission,
                )
            )
            op.execute(
                sa.text("""\
                INSERT INTO auth.role_permission (
                    created_by,
                    role_id,
                    permission_id
                ) VALUES (
                    (SELECT ID FROM auth."user" where username = 'SYSTEM'),
                    (SELECT ID FROM auth."role" where name = :role),
                    (SELECT ID FROM auth."permission" where name = :permission)
                )
                ON CONFLICT (role_id, permission_id) DO NOTHING;
            """).bindparams(
                    role=role,
                    permission=permission,
                )
            )


def downgrade() -> None:
    raise RuntimeError("Upgrades only")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "template", schema="specification", type_="foreignkey")
    op.drop_column("template", "experimental_state_id", schema="specification")
    op.drop_constraint(None, "prompt", schema="specification", type_="foreignkey")
    op.drop_column("prompt", "experimental_state_id", schema="specification")
    op.drop_constraint(None, "model", schema="specification", type_="foreignkey")
    op.drop_constraint(None, "model", schema="specification", type_="unique")
    op.drop_column("model", "experimental_state_id", schema="specification")
    op.drop_column("model", "name", schema="specification")
    op.drop_constraint(None, "sample", schema="sample", type_="foreignkey")
    op.drop_column("sample", "experimental_state_id", schema="sample")
    op.drop_table("experimental_state", schema="research")
    # ### end Alembic commands ###
