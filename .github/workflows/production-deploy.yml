name: Production Deploy

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to deploy to production'
        required: true
        type: string

env:
  REGISTRY: "registry.digitalocean.com"
  SERVER_WORKER_IMAGE_NAME: "mcbench/server-worker"
  RENDER_WORKER_IMAGE_NAME: "mcbench/render-worker"
  ADMIN_WORKER_IMAGE_NAME: "mcbench/admin-worker"
  WORKER_IMAGE_NAME: "mcbench/worker"
  SERVER_WORKER_CONTAINER_PREFIX: "server-worker"
  RENDER_WORKER_CONTAINER_PREFIX: "render-worker"
  ADMIN_WORKER_CONTAINER_PREFIX: "admin-worker"
  WORKER_CONTAINER_PREFIX: "worker"
  SCHEDULER_CONTAINER_PREFIX: "scheduler"
  DOCKER_LOGIN_USERNAME: huntcsg@gmail.com

jobs:
  verify-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify commit is on main
        run: |
          if ! git branch --contains ${{ github.event.inputs.commit_hash }} | grep -q "main"; then
            echo "Error: Commit ${{ github.event.inputs.commit_hash }} is not on the main branch"
            exit 1
          fi

  tag-production:
    needs: verify-commit
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Tag images as production
        run: |
          for image in server-worker render-worker minecraft-builder admin-api admin-worker api worker; do
            echo "Tagging $image as production..."
            docker buildx imagetools create \
              ${{ env.REGISTRY }}/mcbench/$image:${{ github.event.inputs.commit_hash }} \
              --tag ${{ env.REGISTRY }}/mcbench/$image:production
          done

  prepare-workers:
    needs: tag-production
    runs-on: ubuntu-latest
    outputs:
      server-worker-ips: ${{ steps.set-ips.outputs.server-worker-ips }}
      render-worker-ips: ${{ steps.set-ips.outputs.render-worker-ips }}
      admin-worker-ips: ${{ steps.set-ips.outputs.admin-worker-ips }}
      worker-ips: ${{ steps.set-ips.outputs.worker-ips }}
      scheduler-ips: ${{ steps.set-ips.outputs.scheduler-ips }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - id: set-ips
        run: |
          echo "server-worker-ips="$(doctl compute reserved-ip list -o json | jq -c '[.[] | select(.droplet.tags[] == "server-worker-prod") | .ip]') >> $GITHUB_OUTPUT
          echo "render-worker-ips="$(doctl compute reserved-ip list -o json | jq -c '[.[] | select(.droplet.tags[] == "render-worker-prod") | .ip]') >> $GITHUB_OUTPUT
          echo "admin-worker-ips="$(doctl compute reserved-ip list -o json | jq -c '[.[] | select(.droplet.tags[] == "admin-worker-prod") | .ip]') >> $GITHUB_OUTPUT
          echo "worker-ips="$(doctl compute reserved-ip list -o json | jq -c '[.[] | select(.droplet.tags[] == "worker-prod") | .ip]') >> $GITHUB_OUTPUT
          echo "scheduler-ips="$(doctl compute reserved-ip list -o json | jq -c '[.[] | select(.droplet.tags[] == "scheduler-prod") | .ip]') >> $GITHUB_OUTPUT

  deploy-server-worker:
    needs: prepare-workers
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        ip: ${{ fromJson(needs.prepare-workers.outputs.server-worker-ips) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ matrix.ip }}
          DROPLET_USER: ${{ secrets.DROPLET_USERNAME }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.SERVER_WORKER_IMAGE_NAME }}
          TAG: "production"
          CONTAINER_PREFIX: ${{ env.SERVER_WORKER_CONTAINER_PREFIX }}
          SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
          SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}
          SPACES_ENDPOINT: ${{ secrets.SPACES_ENDPOINT }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_HOST >> ~/.ssh/known_hosts
          
          scp -i ~/.ssh/deploy_key ./deploy/server-worker-deploy.sh $DROPLET_USER@$DROPLET_HOST:/tmp/deploy.sh
          scp -i ~/.ssh/deploy_key ./deploy/docker-cleanup.sh $DROPLET_USER@$DROPLET_HOST:/opt/docker-cleanup.sh
          ssh -i ~/.ssh/deploy_key $DROPLET_USER@$DROPLET_HOST "chmod +x /tmp/deploy.sh \
            && DOCKER_LOGIN_USERNAME=${{ env.DOCKER_LOGIN_USERNAME }} \
            DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            REGISTRY=$REGISTRY \
            IMAGE_NAME=$IMAGE_NAME \
            TAG=$TAG \
            CONTAINER_PREFIX=$CONTAINER_PREFIX \
            SPACES_ACCESS_KEY=${{ secrets.SPACES_ACCESS_KEY }} \
            SPACES_SECRET_KEY=${{ secrets.SPACES_SECRET_KEY }} \
            SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }} \
            /tmp/deploy.sh"

  deploy-render-worker:
    needs: prepare-workers
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        ip: ${{ fromJson(needs.prepare-workers.outputs.render-worker-ips) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ matrix.ip }}
          DROPLET_USER: ${{ secrets.DROPLET_USERNAME }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.RENDER_WORKER_IMAGE_NAME }}
          TAG: "production"
          CONTAINER_PREFIX: ${{ env.RENDER_WORKER_CONTAINER_PREFIX }}
          SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
          SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}
          SPACES_ENDPOINT: ${{ secrets.SPACES_ENDPOINT }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_HOST >> ~/.ssh/known_hosts
          
          scp -i ~/.ssh/deploy_key ./deploy/render-worker-deploy.sh $DROPLET_USER@$DROPLET_HOST:/tmp/deploy.sh
          scp -i ~/.ssh/deploy_key ./deploy/docker-cleanup.sh $DROPLET_USER@$DROPLET_HOST:/opt/docker-cleanup.sh
          ssh -i ~/.ssh/deploy_key $DROPLET_USER@$DROPLET_HOST "chmod +x /tmp/deploy.sh \
            && DOCKER_LOGIN_USERNAME=${{ env.DOCKER_LOGIN_USERNAME }} \
            DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            REGISTRY=$REGISTRY \
            IMAGE_NAME=$IMAGE_NAME \
            TAG=$TAG \
            CONTAINER_PREFIX=$CONTAINER_PREFIX \
            SPACES_ACCESS_KEY=${{ secrets.SPACES_ACCESS_KEY }} \
            SPACES_SECRET_KEY=${{ secrets.SPACES_SECRET_KEY }} \
            SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }} \
            /tmp/deploy.sh"

  deploy-admin-worker:
    needs: prepare-workers
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        ip: ${{ fromJson(needs.prepare-workers.outputs.admin-worker-ips) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ matrix.ip }}
          DROPLET_USER: ${{ secrets.DROPLET_USERNAME }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.ADMIN_WORKER_IMAGE_NAME }}
          TAG: "production"
          CONTAINER_PREFIX: ${{ env.ADMIN_WORKER_CONTAINER_PREFIX }}
          SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
          SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}
          SPACES_ENDPOINT: ${{ secrets.SPACES_ENDPOINT }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_HOST >> ~/.ssh/known_hosts
          
          scp -i ~/.ssh/deploy_key ./deploy/admin-worker-deploy.sh $DROPLET_USER@$DROPLET_HOST:/tmp/deploy.sh
          scp -i ~/.ssh/deploy_key ./deploy/docker-cleanup.sh $DROPLET_USER@$DROPLET_HOST:/opt/docker-cleanup.sh
          ssh -i ~/.ssh/deploy_key $DROPLET_USER@$DROPLET_HOST "chmod +x /tmp/deploy.sh \
            && DOCKER_LOGIN_USERNAME=${{ env.DOCKER_LOGIN_USERNAME }} \
            DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            REGISTRY=$REGISTRY \
            IMAGE_NAME=$IMAGE_NAME \
            TAG=$TAG \
            CONTAINER_PREFIX=$CONTAINER_PREFIX \
            SPACES_ACCESS_KEY=${{ secrets.SPACES_ACCESS_KEY }} \
            SPACES_SECRET_KEY=${{ secrets.SPACES_SECRET_KEY }} \
            SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }} \
            /tmp/deploy.sh"

  deploy-worker:
    needs: prepare-workers
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        ip: ${{ fromJson(needs.prepare-workers.outputs.worker-ips) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ matrix.ip }}
          DROPLET_USER: ${{ secrets.DROPLET_USERNAME }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.WORKER_IMAGE_NAME }}
          TAG: "production"
          CONTAINER_PREFIX: ${{ env.WORKER_CONTAINER_PREFIX }}
          SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
          SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}
          SPACES_ENDPOINT: ${{ secrets.SPACES_ENDPOINT }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_HOST >> ~/.ssh/known_hosts
          
          scp -i ~/.ssh/deploy_key ./deploy/worker-deploy.sh $DROPLET_USER@$DROPLET_HOST:/tmp/deploy.sh
          scp -i ~/.ssh/deploy_key ./deploy/docker-cleanup.sh $DROPLET_USER@$DROPLET_HOST:/opt/docker-cleanup.sh
          ssh -i ~/.ssh/deploy_key $DROPLET_USER@$DROPLET_HOST "chmod +x /tmp/deploy.sh \
            && DOCKER_LOGIN_USERNAME=${{ env.DOCKER_LOGIN_USERNAME }} \
            DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            REGISTRY=$REGISTRY \
            IMAGE_NAME=$IMAGE_NAME \
            TAG=$TAG \
            CONTAINER_PREFIX=$CONTAINER_PREFIX \
            SPACES_ACCESS_KEY=${{ secrets.SPACES_ACCESS_KEY }} \
            SPACES_SECRET_KEY=${{ secrets.SPACES_SECRET_KEY }} \
            SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }} \
            /tmp/deploy.sh"

  deploy-scheduler:
    needs: prepare-workers
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        ip: ${{ fromJson(needs.prepare-workers.outputs.scheduler-ips) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Execute deployment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ matrix.ip }}
          DROPLET_USER: ${{ secrets.DROPLET_USERNAME }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.ADMIN_WORKER_IMAGE_NAME }}
          TAG: "production"
          CONTAINER_PREFIX: ${{ env.SCHEDULER_CONTAINER_PREFIX }}
          SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
          SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}
          SPACES_ENDPOINT: ${{ secrets.SPACES_ENDPOINT }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_HOST >> ~/.ssh/known_hosts
          
          scp -i ~/.ssh/deploy_key ./deploy/scheduler-deploy.sh $DROPLET_USER@$DROPLET_HOST:/tmp/deploy.sh
          scp -i ~/.ssh/deploy_key ./deploy/docker-cleanup.sh $DROPLET_USER@$DROPLET_HOST:/opt/docker-cleanup.sh
          ssh -i ~/.ssh/deploy_key $DROPLET_USER@$DROPLET_HOST "chmod +x /tmp/deploy.sh \
            && DOCKER_LOGIN_USERNAME=${{ env.DOCKER_LOGIN_USERNAME }} \
            DIGITALOCEAN_ACCESS_TOKEN=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \
            REGISTRY=$REGISTRY \
            IMAGE_NAME=$IMAGE_NAME \
            TAG=$TAG \
            CONTAINER_PREFIX=$CONTAINER_PREFIX \
            SPACES_ACCESS_KEY=${{ secrets.SPACES_ACCESS_KEY }} \
            SPACES_SECRET_KEY=${{ secrets.SPACES_SECRET_KEY }} \
            SPACES_ENDPOINT=${{ secrets.SPACES_ENDPOINT }} \
            /tmp/deploy.sh"